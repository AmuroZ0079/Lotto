#!/usr/bin/env python3
"""
Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lottery API
"""

import http.server
import socketserver
import json
import urllib.parse
from datetime import datetime
import os
from dotenv import load_dotenv
from supabase import create_client, Client
import requests
from bs4 import BeautifulSoup
import re

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

class LotteryAPI:
    def __init__(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Lottery API"""
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase
        try:
            supabase_url = os.getenv('SUPABASE_URL')
            supabase_key = os.getenv('SUPABASE_KEY')
            self.supabase: Client = create_client(supabase_url, supabase_key)
            print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÑ‡∏î‡πâ: {e}")
            self.supabase = None

    def get_lottery_by_date(self, draw_date):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô URL
            date_obj = datetime.strptime(draw_date, '%Y-%m-%d')
            day = date_obj.day
            month = date_obj.month
            year = date_obj.year + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
            if draw_date == "2025-06-01":
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 1 ‡∏Å.‡∏¢. 2568 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
                url = "https://news.sanook.com/lotto/check/01092568/"
                print(f"üîç ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 1 ‡∏Å.‡∏¢. 2568: {url}")
            elif draw_date == "2025-10-16":
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 16 ‡∏ï.‡∏Ñ. 2568 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
                url = "https://news.sanook.com/lotto/check/16102568/"
                print(f"üîç ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 16 ‡∏ï.‡∏Ñ. 2568: {url}")
            else:
                url = f"https://news.sanook.com/lotto/check/{day:02d}{month:02d}{year}/"
                print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {url}")
            
            response = self.session.get(url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON-LD ‡∏Å‡πà‡∏≠‡∏ô
            json_data = self._extract_json_ld(soup)
            if json_data:
                print("‚úÖ ‡∏û‡∏ö JSON-LD data")
                lottery_data = self._parse_json_ld_data(json_data, draw_date)
                if lottery_data:
                    return lottery_data
            
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö JSON-LD ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            print("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö JSON-LD ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°")
            lottery_data = self._parse_lottery_data(soup, draw_date)
            return lottery_data
            
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return None

    def _extract_json_ld(self, soup):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON-LD ‡∏à‡∏≤‡∏Å HTML"""
        try:
            # ‡∏´‡∏≤ script tag ‡∏ó‡∏µ‡πà‡∏°‡∏µ type="application/ld+json"
            json_scripts = soup.find_all('script', type='application/ld+json')
            print(f"üîç ‡∏û‡∏ö script tag: {len(json_scripts)}")
            
            for i, script in enumerate(json_scripts):
                print(f"üîç Script {i+1}: {script.get('class', 'no-class')}")
                try:
                    json_data = json.loads(script.string)
                    if json_data.get('@type') == 'NewsArticle':
                        print(f"‚úÖ ‡∏û‡∏ö NewsArticle ‡πÉ‡∏ô script {i+1}")
                        return json_data
                except json.JSONDecodeError:
                    continue
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å class="next-head"
            next_head_scripts = soup.find_all('script', class_='next-head')
            print(f"üîç ‡∏û‡∏ö next-head script: {len(next_head_scripts)}")
            
            for i, script in enumerate(next_head_scripts):
                print(f"üîç Next-head script {i+1}: {script.get('type', 'no-type')}")
                if script.get('type') == 'application/ld+json':
                    try:
                        json_data = json.loads(script.string)
                        if json_data.get('@type') == 'NewsArticle':
                            print(f"‚úÖ ‡∏û‡∏ö NewsArticle ‡πÉ‡∏ô next-head script {i+1}")
                            return json_data
                    except json.JSONDecodeError:
                        continue
            
            return None
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á JSON-LD ‡πÑ‡∏î‡πâ: {e}")
            return None

    def _parse_json_ld_data(self, json_data, draw_date):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å JSON-LD"""
        try:
            lottery_data = {
                'draw_date': draw_date,
                'draw_number': f"{datetime.strptime(draw_date, '%Y-%m-%d').day}/{datetime.strptime(draw_date, '%Y-%m-%d').year + 543}",
                'first_prize': '',
                'second_prize_1': '',
                'second_prize_2': '',
                'third_prize_1': '',
                'third_prize_2': '',
                'fourth_prize_1': '',
                # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà
                'second_prizes': [],  # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 (5 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
                'third_prizes': [],   # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 (10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
                'fourth_prizes': [],  # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 (50 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
                'fifth_prizes': [],   # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 (100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
                'nearby_prizes': []   # ‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (2 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
            }
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å articleBody
            article_body = json_data.get('articleBody', '')
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å articleBody...")
            print(f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ articleBody: {article_body[:1000]}...")

            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            numbers_in_body = re.findall(r'\d{2,6}', article_body)
            print(f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô articleBody: {numbers_in_body[:20]}...")
            
            # ‡∏´‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 - ‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            first_prize_match = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})', article_body)
            if first_prize_match:
                lottery_data['first_prize'] = first_prize_match.group(1)
                print(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {lottery_data['first_prize']}")
            else:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô - ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 6
                first_prize_alt = re.search(r'\b(\d{6})\b', article_body)
                if first_prize_alt:
                    lottery_data['first_prize'] = first_prize_alt.group(1)
                    print(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô): {lottery_data['first_prize']}")
            
            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ pattern ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            front3_match = re.search(r'‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})&nbsp;\s+(\d{3})&nbsp;', article_body)
            if front3_match:
                lottery_data['second_prize_1'] = front3_match.group(1)
                lottery_data['second_prize_2'] = front3_match.group(2)
                print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")
            else:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å pattern ‡∏≠‡∏∑‡πà‡∏ô
                front3_alt = re.search(r'(\d{3})&nbsp;\s+(\d{3})&nbsp;\s+.*?‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß', article_body)
                if front3_alt:
                    lottery_data['second_prize_1'] = front3_alt.group(1)
                    lottery_data['second_prize_2'] = front3_alt.group(2)
                    print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (pattern 2): {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")

            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å debug
            # ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà debug ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤: 656&nbsp; 781&nbsp;
            last3_match = re.search(r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})&nbsp;\s+(\d{3})&nbsp;', article_body)
            if last3_match:
                lottery_data['third_prize_1'] = last3_match.group(1)
                lottery_data['third_prize_2'] = last3_match.group(2)
                print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
            else:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                all_3digit_numbers = re.findall(r'\b(\d{3})\b', article_body)
                print(f"‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö: {all_3digit_numbers}")

                # ‡∏ï‡∏±‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å
                used_numbers = []
                if lottery_data['second_prize_1']: used_numbers.append(lottery_data['second_prize_1'])
                if lottery_data['second_prize_2']: used_numbers.append(lottery_data['second_prize_2'])

                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                remaining_numbers = [num for num in all_3digit_numbers if num not in used_numbers and num != '000']

                if len(remaining_numbers) >= 2:
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß"
                    pos_last3_text = article_body.find('‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß')
                    if pos_last3_text != -1:
                        text_after_last3 = article_body[pos_last3_text:]
                        # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 000
                        last3_candidates = re.findall(r'\b(\d{3})\b', text_after_last3)
                        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 000 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                        valid_last3 = [num for num in last3_candidates if num != '000' and num not in used_numbers]
                        if len(valid_last3) >= 2:
                            lottery_data['third_prize_1'] = valid_last3[0]
                            lottery_data['third_prize_2'] = valid_last3[1]
                            print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á): {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
                        else:
                            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                            remaining_valid = [num for num in remaining_numbers if num not in ['000', '100', '200']]
                            if len(remaining_valid) >= 2:
                                lottery_data['third_prize_1'] = remaining_valid[0]
                                lottery_data['third_prize_2'] = remaining_valid[1]
                                print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£): {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")

            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å debug
            last2_match = re.search(r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?(\d{2})(?!\d)', article_body)
            if last2_match:
                temp_last2 = last2_match.group(1)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤
                if temp_last2 != '00':  # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏•‡∏Ç 00 ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å 000
                    lottery_data['fourth_prize_1'] = temp_last2
                    print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: {lottery_data['fourth_prize_1']}")
                else:
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    pos_last2_text = article_body.find('‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß')
                    if pos_last2_text != -1:
                        text_after_last2 = article_body[pos_last2_text:]
                        # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤
                        last2_candidates = re.findall(r'\b(\d{2})(?!\d)', text_after_last2)
                        if last2_candidates:
                            lottery_data['fourth_prize_1'] = last2_candidates[0]
                            print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á): {lottery_data['fourth_prize_1']}")
            else:
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                pos_last2_text = article_body.find('‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß')
                if pos_last2_text != -1:
                    text_after_last2 = article_body[pos_last2_text:]
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ
                    last2_candidates = re.findall(r'\b(\d{2})(?!\d)', text_after_last2)
                    if last2_candidates:
                        lottery_data['fourth_prize_1'] = last2_candidates[0]
                        print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á fallback): {lottery_data['fourth_prize_1']}")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            self._extract_additional_prizes(article_body, lottery_data)

            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô - ‡πÉ‡∏ä‡πâ HTML parsing
            print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô - ‡πÉ‡∏ä‡πâ HTML parsing...")
            
            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ HTML parsing
            if not lottery_data['second_prize_1']:
                front3_html = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})\s+(\d{3})', article_body)
                if front3_html:
                    lottery_data['second_prize_1'] = front3_html.group(1)
                    lottery_data['second_prize_2'] = front3_html.group(2)
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (HTML): {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")
            
            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ HTML parsing
            if not lottery_data['third_prize_1']:
                last3_html = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})\s+(\d{3})', article_body)
                if last3_html:
                    lottery_data['third_prize_1'] = last3_html.group(1)
                    lottery_data['third_prize_2'] = last3_html.group(2)
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (HTML): {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
            
            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ HTML parsing
            if not lottery_data['fourth_prize_1']:
                last2_html = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?(\d{2})', article_body)
                if last2_html:
                    lottery_data['fourth_prize_1'] = last2_html.group(1)
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (HTML): {lottery_data['fourth_prize_1']}")
            
            return lottery_data

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON-LD ‡πÑ‡∏î‡πâ: {e}")
            return None

    def _extract_additional_prizes(self, article_body, lottery_data):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"""
        try:
            # ‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (2 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
            nearby_patterns = [
                r'‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})&nbsp;\s*(\d{6})&nbsp;',
                r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})&nbsp;\s*(\d{6})&nbsp;'
            ]
            for pattern in nearby_patterns:
                nearby_match = re.search(pattern, article_body)
                if nearby_match:
                    lottery_data['nearby_prizes'] = [nearby_match.group(1), nearby_match.group(2)]
                    print(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {lottery_data['nearby_prizes']}")
                    break

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 (5 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡πÉ‡∏ä‡πâ findall ‡πÅ‡∏ó‡∏ô
            second_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ 5 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}&nbsp;.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3)', article_body, re.DOTALL)
            if second_section:
                second_numbers = re.findall(r'(\d{6})&nbsp;', second_section.group(1))
                lottery_data['second_prizes'] = second_numbers[:5]
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2: {lottery_data['second_prizes']}")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 (10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
            third_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 ‡∏°‡∏µ 10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}&nbsp;.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4|$)', article_body, re.DOTALL)
            if third_section:
                third_numbers = re.findall(r'(\d{6})&nbsp;', third_section.group(1))
                lottery_data['third_prizes'] = third_numbers[:10]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3: {len(lottery_data['third_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 (50 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            fourth_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 ‡∏°‡∏µ 50 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5|$)', article_body, re.DOTALL)
            if fourth_section:
                # ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏° column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ &nbsp;
                fourth_numbers = re.findall(r'(\d{6})(?:&nbsp;|(?=\s)|(?=\n)|$)', fourth_section.group(1))
                lottery_data['fourth_prizes'] = fourth_numbers[:50]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 50 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4: {len(lottery_data['fourth_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 (100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            fifth_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 ‡∏°‡∏µ 100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}.*?)(?=$)', article_body, re.DOTALL)
            if fifth_section:
                # ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏° column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ &nbsp;
                fifth_numbers = re.findall(r'(\d{6})(?:&nbsp;|(?=\s)|(?=\n)|$)', fifth_section.group(1))
                lottery_data['fifth_prizes'] = fifth_numbers[:100]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 100 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5: {len(lottery_data['fifth_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ: {e}")

    def _parse_lottery_data(self, soup, draw_date):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å HTML"""
        try:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î - ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 4 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏•‡∏±‡∏Å
            lottery_data = {
                'draw_date': draw_date,
                'draw_number': f"{datetime.strptime(draw_date, '%Y-%m-%d').day}/{datetime.strptime(draw_date, '%Y-%m-%d').year + 543}",
                'first_prize': '',
                'second_prize_1': '',
                'second_prize_2': '',
                'third_prize_1': '',
                'third_prize_2': '',
                'fourth_prize_1': ''
            }
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            # Focus ‡∏ó‡∏µ‡πà 4 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏•‡∏±‡∏Å
            
            # 1. ‡∏´‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 ‡∏à‡∏≤‡∏Å class 'lotto_number--first'
            first_prize_elements = soup.find_all(class_='lotto_number--first')
            for element in first_prize_elements:
                text = element.get_text().strip()
                if re.match(r'\d{6}', text):
                    lottery_data['first_prize'] = text
                    print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {text}")
                    break
            
            # 2. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            # ‡∏´‡∏≤ column ‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß)
            lottocheck_columns = soup.find_all(class_='lottocheck_column')
            print(f"üîç ‡∏û‡∏ö lottocheck_column: {len(lottocheck_columns)}")
            
            # Debug: ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
            for i, column in enumerate(lottocheck_columns):
                print(f"Column {i+1}: {column.get_text().strip()[:100]}...")
            
            if len(lottocheck_columns) >= 2:
                # Column 2: ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                column2 = lottocheck_columns[1]
                front3_numbers = column2.find_all(class_='lotto_number')
                print(f"Column 2 - ‡∏û‡∏ö lotto_number: {len(front3_numbers)}")
                if len(front3_numbers) >= 2:
                    lottery_data['second_prize_1'] = front3_numbers[0].get_text().strip()
                    lottery_data['second_prize_2'] = front3_numbers[1].get_text().strip()
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")
            
            # 3. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
            if len(lottocheck_columns) >= 3:
                # Column 3: ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
                column3 = lottocheck_columns[2]
                last3_numbers = column3.find_all(class_='lotto_number')
                print(f"Column 3 - ‡∏û‡∏ö lotto_number: {len(last3_numbers)}")
                if len(last3_numbers) >= 2:
                    lottery_data['third_prize_1'] = last3_numbers[0].get_text().strip()
                    lottery_data['third_prize_2'] = last3_numbers[1].get_text().strip()
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
            
            # 4. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
            if len(lottocheck_columns) >= 4:
                # Column 4: ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
                column4 = lottocheck_columns[3]
                last2_numbers = column4.find_all(class_='lotto_number')
                print(f"Column 4 - ‡∏û‡∏ö lotto_number: {len(last2_numbers)}")
                if len(last2_numbers) >= 1:
                    lottery_data['fourth_prize_1'] = last2_numbers[0].get_text().strip()
                    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: {lottery_data['fourth_prize_1']}")
            
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sections ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            if not lottery_data['first_prize']:
                # ‡∏´‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
                prize_elements = soup.find_all(['span', 'div', 'td', 'strong'], string=re.compile(r'\d{6}'))
                for element in prize_elements:
                    text = element.get_text().strip()
                    if re.match(r'\d{6}', text):
                        lottery_data['first_prize'] = text
                        break
            
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
            if not lottery_data['second_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô...")
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ string pattern (‡πÅ‡∏Å‡πâ DeprecationWarning)
                front3_pattern = soup.find_all(string=re.compile(r'‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß'))
                print(f"üîç ‡∏û‡∏ö text '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß': {len(front3_pattern)}")
                for pattern in front3_pattern:
                    parent = pattern.parent
                    if parent:
                        numbers = parent.find_all(class_='lotto_number')
                        print(f"üîç ‡∏û‡∏ö lotto_number ‡πÉ‡∏ô parent: {len(numbers)}")
                        if len(numbers) >= 2:
                            lottery_data['second_prize_1'] = numbers[0].get_text().strip()
                            lottery_data['second_prize_2'] = numbers[1].get_text().strip()
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô): {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")
                            break

            if not lottery_data['third_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô...")
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ string pattern (‡πÅ‡∏Å‡πâ DeprecationWarning)
                last3_pattern = soup.find_all(string=re.compile(r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß'))
                print(f"üîç ‡∏û‡∏ö text '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß': {len(last3_pattern)}")
                for pattern in last3_pattern:
                    parent = pattern.parent
                    if parent:
                        numbers = parent.find_all(class_='lotto_number')
                        print(f"üîç ‡∏û‡∏ö lotto_number ‡πÉ‡∏ô parent: {len(numbers)}")
                        if len(numbers) >= 2:
                            lottery_data['third_prize_1'] = numbers[0].get_text().strip()
                            lottery_data['third_prize_2'] = numbers[1].get_text().strip()
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô): {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
                            break

            if not lottery_data['fourth_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô...")
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ string pattern (‡πÅ‡∏Å‡πâ DeprecationWarning)
                last2_pattern = soup.find_all(string=re.compile(r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß'))
                print(f"üîç ‡∏û‡∏ö text '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß': {len(last2_pattern)}")
                for pattern in last2_pattern:
                    parent = pattern.parent
                    if parent:
                        numbers = parent.find_all(class_='lotto_number')
                        print(f"üîç ‡∏û‡∏ö lotto_number ‡πÉ‡∏ô parent: {len(numbers)}")
                        if len(numbers) >= 1:
                            lottery_data['fourth_prize_1'] = numbers[0].get_text().strip()
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô): {lottery_data['fourth_prize_1']}")
                            break

            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            if not lottery_data['second_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ...")
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0-9
                all_numbers = soup.find_all(class_='lotto_number')
                for number in all_numbers:
                    text = number.get_text().strip()
                    if re.match(r'\d{3}', text) and len(text) == 3:
                        if not lottery_data['second_prize_1']:
                            lottery_data['second_prize_1'] = text
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ): {text}")
                        elif not lottery_data['second_prize_2']:
                            lottery_data['second_prize_2'] = text
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ): {text}")
                            break

            if not lottery_data['third_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ...")
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0-9
                all_numbers = soup.find_all(class_='lotto_number')
                for number in all_numbers:
                    text = number.get_text().strip()
                    if re.match(r'\d{3}', text) and len(text) == 3:
                        if not lottery_data['third_prize_1']:
                            lottery_data['third_prize_1'] = text
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ): {text}")
                        elif not lottery_data['third_prize_2']:
                            lottery_data['third_prize_2'] = text
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ): {text}")
                            break

            if not lottery_data['fourth_prize_1']:
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ...")
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0-9
                all_numbers = soup.find_all(class_='lotto_number')
                for number in all_numbers:
                    text = number.get_text().strip()
                    if re.match(r'\d{2}', text) and len(text) == 2:
                        lottery_data['fourth_prize_1'] = text
                        print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ): {text}")
                        break
            
            return lottery_data
            
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return None

    def save_to_database(self, lottery_data):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if not self.supabase:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False

        try:
            # 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_draw = self.supabase.table('lottery_draws').select("*").eq("draw_date", lottery_data['draw_date']).execute()

            if existing_draw.data:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
                draw_id = existing_draw.data[0]['id']
                self.supabase.table('lottery_prizes').delete().eq("draw_id", draw_id).execute()
                print(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î {lottery_data['draw_date']}")
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                draw_result = self.supabase.table('lottery_draws').insert({
                    'draw_date': lottery_data['draw_date'],
                    'draw_number': lottery_data['draw_number'],
                    'status': 'active'
                }).execute()
                draw_id = draw_result.data[0]['id']
                print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà ID: {draw_id}")

            # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            prizes_to_insert = []

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏•‡∏±‡∏Å
            prize_configs = [
                ('first', lottery_data['first_prize'], 6000000),
                ('front_3', lottery_data['second_prize_1'], 4000, 1),
                ('front_3', lottery_data['second_prize_2'], 4000, 2),
                ('back_3', lottery_data['third_prize_1'], 4000, 1),
                ('back_3', lottery_data['third_prize_2'], 4000, 2),
                ('back_2', lottery_data['fourth_prize_1'], 2000),
            ]

            for config in prize_configs:
                if len(config) == 3:  # ‡πÑ‡∏°‡πà‡∏°‡∏µ position
                    prize_type, number, amount = config
                    position = 1
                else:  # ‡∏°‡∏µ position
                    prize_type, number, amount, position = config

                if number:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç
                    prizes_to_insert.append({
                        'draw_id': draw_id,
                        'prize_type': prize_type,
                        'prize_number': number,
                        'position': position,
                        'amount': amount
                    })

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            for i, number in enumerate(lottery_data.get('nearby_prizes', []), 1):
                if number:
                    prizes_to_insert.append({
                        'draw_id': draw_id,
                        'prize_type': 'nearby',
                        'prize_number': number,
                        'position': i,
                        'amount': 100000
                    })

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5
            prize_types_extended = [
                ('second', lottery_data.get('second_prizes', []), 200000),
                ('third', lottery_data.get('third_prizes', []), 80000),
                ('fourth', lottery_data.get('fourth_prizes', []), 40000),
                ('fifth', lottery_data.get('fifth_prizes', []), 20000)
            ]

            for prize_type, numbers, amount in prize_types_extended:
                for i, number in enumerate(numbers, 1):
                    if number:
                        prizes_to_insert.append({
                            'draw_id': draw_id,
                            'prize_type': prize_type,
                            'prize_number': number,
                            'position': i,
                            'amount': amount
                        })

            # 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            if prizes_to_insert:
                result = self.supabase.table('lottery_prizes').insert(prizes_to_insert).execute()
                print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• {len(prizes_to_insert)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {lottery_data['draw_date']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return False

    def get_from_database(self, draw_date):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if not self.supabase:
            return None

        try:
            result = self.supabase.table('lottery_results').select("*").eq("draw_date", draw_date).execute()
            if result.data:
                return result.data[0]
            return None
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return None

    def check_number(self, number, draw_date=None):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"""
        if not self.supabase:
            return None

        try:
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if draw_date:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                check_draw = self.supabase.table('lottery_draws').select("id").eq("draw_date", draw_date).execute()

                if not check_draw.data:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ scrape ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                    print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏≥‡∏•‡∏±‡∏á scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
                    lottery_data = self.get_lottery_by_date(draw_date)

                    if lottery_data:
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        self.save_to_database(lottery_data)
                        print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    else:
                        print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÑ‡∏î‡πâ")
                        return None

            # ‡πÉ‡∏ä‡πâ Supabase query ‡πÅ‡∏ó‡∏ô raw SQL
            if draw_date:
                # Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
                result = (self.supabase.table('lottery_prizes')
                         .select('prize_type, amount, position, lottery_draws!inner(draw_date, draw_number)')
                         .eq('prize_number', number)
                         .eq('lottery_draws.draw_date', draw_date)
                         .execute())
            else:
                # Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏á‡∏ß‡∏î
                result = (self.supabase.table('lottery_prizes')
                         .select('prize_type, amount, position, lottery_draws!inner(draw_date, draw_number)')
                         .eq('prize_number', number)
                         .order('lottery_draws.draw_date', desc=True)
                         .execute())

            if result.data:
                # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏á‡∏ß‡∏î
                results_by_draw = {}
                for item in result.data:
                    draw_date_key = item['draw_date']
                    if draw_date_key not in results_by_draw:
                        results_by_draw[draw_date_key] = {
                            'draw_date': draw_date_key,
                            'draw_number': item['draw_number'],
                            'prizes': []
                        }

                    # ‡πÅ‡∏õ‡∏•‡∏á prize_type ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                    prize_names = {
                        'first': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                        'front_3': '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß',
                        'back_3': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß',
                        'back_2': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß',
                        'nearby': '‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                        'second': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2',
                        'third': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3',
                        'fourth': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4',
                        'fifth': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5'
                    }

                    results_by_draw[draw_date_key]['prizes'].append({
                        'prize_type': item['prize_type'],
                        'prize_name': prize_names.get(item['prize_type'], item['prize_type']),
                        'position': item['position'],
                        'amount': item['amount']
                    })

                return {
                    'number': number,
                    'total_draws_found': len(results_by_draw),
                    'results': list(results_by_draw.values())
                }

            return None

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ: {e}")
            return None

    def check_number_complete(self, number, draw_date):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (6 ‡∏ï‡∏±‡∏ß, ‡∏´‡∏ô‡πâ‡∏≤ 3, ‡∏ó‡πâ‡∏≤‡∏¢ 3, ‡∏ó‡πâ‡∏≤‡∏¢ 2)"""
        if not self.supabase:
            return {"number": number, "draw_date": draw_date, "results": [], "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}

        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            check_draw = self.supabase.table('lottery_draws').select("id, draw_number").eq("draw_date", draw_date).execute()

            if not check_draw.data:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ scrape ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏≥‡∏•‡∏±‡∏á scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
                lottery_data = self.get_lottery_by_date(draw_date)

                if lottery_data:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    self.save_to_database(lottery_data)
                    print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    return {"number": number, "draw_date": draw_date, "results": [], "message": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î {draw_date} ‡πÑ‡∏î‡πâ"}

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≤‡∏á‡πÜ
            patterns_to_check = {
                "full_6_digits": number,           # ‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏°
                "front_3_digits": number[:3],      # ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                "back_3_digits": number[-3:],      # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
                "back_2_digits": number[-2:]       # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
            }

            all_matches = []

            # ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            for match_type, check_number in patterns_to_check.items():
                result = (self.supabase.table('lottery_prizes')
                         .select('prize_type, amount, position, lottery_draws!inner(draw_date, draw_number)')
                         .eq('prize_number', check_number)
                         .eq('lottery_draws.draw_date', draw_date)
                         .execute())

                if result.data:
                    for item in result.data:
                        # ‡πÅ‡∏õ‡∏•‡∏á prize_type ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                        prize_names = {
                            'first_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                            'front_3': '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß',
                            'back_3': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß',
                            'back_2': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß',
                            'nearby': '‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                            'second_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2',
                            'third_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3',
                            'fourth_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4',
                            'fifth_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5'
                        }

                        all_matches.append({
                            'match_type': match_type,
                            'matched_digits': check_number,
                            'prize_type': item['prize_type'],
                            'prize_name': prize_names.get(item['prize_type'], item['prize_type']),
                            'amount': item['amount'],
                            'position': item['position']
                        })

            # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° amount (‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            all_matches.sort(key=lambda x: x['amount'], reverse=True)

            return {
                "number": number,
                "draw_date": draw_date,
                "draw_number": check_draw.data[0]['draw_number'] if check_draw.data else None,
                "total_matches": len(all_matches),
                "results": all_matches,
                "message": "‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!" if all_matches else "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
            }

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÑ‡∏î‡πâ: {e}")
            return {"number": number, "draw_date": draw_date, "results": [], "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}

class LotteryHandler(http.server.BaseHTTPRequestHandler):
    def validate_lottery_date(self, date_str):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ß‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 16)"""
        try:
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            day = date_obj.day

            # ‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 16
            if day not in [1, 16]:
                return False, f"‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 16 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {day}"

            return True, None
        except ValueError:
            return False, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ YYYY-MM-DD"

    def validate_lottery_number(self, number):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß)"""
        if not isinstance(number, str):
            return False, "‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string"

        if len(number) != 6:
            return False, f"‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 6 ‡∏ï‡∏±‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà {len(number)} ‡∏ï‡∏±‡∏ß"

        if not number.isdigit():
            return False, "‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"

        return True, None

    def do_GET(self):
        """Handle GET requests"""
        try:
            # ‡πÅ‡∏¢‡∏Å path ‡πÅ‡∏•‡∏∞ query parameters
            path = self.path
            if '?' in path:
                path, query_string = path.split('?', 1)
                params = urllib.parse.parse_qs(query_string)
            else:
                params = {}
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
            if path == '/api/lottery':
                # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ parameter draw_date
                if 'draw_date' not in params:
                    self.send_error_response(400, "Missing required parameter: draw_date")
                    return

                draw_date = params['draw_date'][0]

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                try:
                    datetime.strptime(draw_date, '%Y-%m-%d')
                except ValueError:
                    self.send_error_response(400, "Invalid date format. Use YYYY-MM-DD")
                    return

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á API instance
                api = LotteryAPI()

                # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
                existing_data = api.get_from_database(draw_date)
                if existing_data:
                    self.send_success_response(existing_data)
                    return

                # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ scrap ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
                lottery_data = api.get_lottery_by_date(draw_date)

                if lottery_data:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    api.save_to_database(lottery_data)
                    self.send_success_response(lottery_data)
                else:
                    self.send_error_response(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")

            elif path == '/api/lottery/check':
                # API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç
                if 'number' not in params:
                    self.send_error_response(400, "Missing required parameter: number")
                    return

                number = params['number'][0]
                draw_date = params.get('draw_date', [None])[0]  # optional

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á API instance
                api = LotteryAPI()

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç
                results = api.check_number(number, draw_date)

                if results:
                    self.send_success_response(results)
                else:
                    self.send_success_response({
                        "number": number,
                        "draw_date": draw_date,
                        "results": [],
                        "message": "‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                    })

            else:
                self.send_error_response(404, "Not Found")
                
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô API: {e}")
            self.send_error_response(500, f"Internal Server Error: {str(e)}")

    def do_POST(self):
        """Handle POST requests"""
        try:
            # ‡πÅ‡∏¢‡∏Å path
            path = self.path.split('?')[0]

            if path == '/api/lottery/check':
                # ‡∏≠‡πà‡∏≤‡∏ô POST data
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)

                try:
                    data = json.loads(post_data.decode('utf-8'))
                except json.JSONDecodeError:
                    self.send_error_response(400, "Invalid JSON format")
                    return

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
                if 'number' not in data:
                    self.send_error_response(400, "Missing required field: number")
                    return

                if 'draw_date' not in data:
                    self.send_error_response(400, "Missing required field: draw_date")
                    return

                number = str(data['number'])
                draw_date = data['draw_date']

                # Validate ‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á 6 ‡∏ï‡∏±‡∏ß)
                is_valid_number, number_error = self.validate_lottery_number(number)
                if not is_valid_number:
                    self.send_error_response(400, number_error)
                    return

                # Validate ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ß‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á 1 ‡∏´‡∏£‡∏∑‡∏≠ 16)
                is_valid_date, date_error = self.validate_lottery_date(draw_date)
                if not is_valid_date:
                    self.send_error_response(400, date_error)
                    return

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á API instance
                api = LotteryAPI()

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
                results = api.check_number_complete(number, draw_date)

                self.send_success_response(results)

            else:
                self.send_error_response(404, "Not Found")

        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô POST API: {e}")
            self.send_error_response(500, f"Internal Server Error: {str(e)}")

    def send_success_response(self, data):
        """‡∏™‡πà‡∏á response ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        response = {
            "status": "success",
            "data": data,
            "timestamp": datetime.now().isoformat()
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def send_error_response(self, status_code, message):
        """‡∏™‡πà‡∏á response ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        response = {
            "status": "error",
            "message": message,
            "timestamp": datetime.now().isoformat()
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def do_OPTIONS(self):
        """Handle preflight OPTIONS requests for CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

def start_server():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server"""
    PORT = 8001
    
    with socketserver.TCPServer(("", PORT), LotteryHandler) as httpd:
        print(f"Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà http://localhost:{PORT}")
        print("\n=== API Endpoints ===")
        print("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢: http://localhost:8001/api/lottery?draw_date=YYYY-MM-DD")
        print("‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç GET: http://localhost:8001/api/lottery/check?number=123456")
        print("‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç POST: POST /api/lottery/check {\"number\":\"123456\",\"draw_date\":\"2025-03-16\"}")
        print("\n=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ===")
        print("http://localhost:8001/api/lottery?draw_date=2025-03-16")
        print("http://localhost:8001/api/lottery/check?number=757563")
        print("http://localhost:8001/api/lottery/check?number=595&draw_date=2025-03-16")
        print("\n‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î server")
        
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nServer ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            httpd.shutdown()

if __name__ == "__main__":
    start_server()
