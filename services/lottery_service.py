import requests
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from .database import DatabaseService
from .scraper import LotteryScraper


class LotteryService:
    def __init__(self):
        self.db = DatabaseService()
        self.scraper = LotteryScraper()

    def get_lottery_by_date(self, draw_date: str) -> Optional[Dict[str, Any]]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å server.py)"""
        try:
            # ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å server.py
            import requests
            from bs4 import BeautifulSoup
            import re
            import json
            from datetime import datetime

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            date_parts = draw_date.split('-')
            year = int(date_parts[0]) + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
            month = int(date_parts[1])
            day = int(date_parts[2])

            # Hard-code URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if draw_date == "2025-06-01":
                url = "https://news.sanook.com/lotto/check/01092568/"
                print(f"üîç ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 1 ‡∏Å.‡∏¢. 2568: {url}")
            elif draw_date == "2025-10-16":
                url = "https://news.sanook.com/lotto/check/16102568/"
                print(f"üîç ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î 16 ‡∏ï.‡∏Ñ. 2568: {url}")
            else:
                url = f"https://news.sanook.com/lotto/check/{day:02d}{month:02d}{year}/"
                print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {url}")

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }

            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')

            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON-LD ‡∏Å‡πà‡∏≠‡∏ô
            json_data = self._extract_json_ld(soup)
            if json_data:
                print("‚úÖ ‡∏û‡∏ö JSON-LD data")
                lottery_data = self._parse_json_ld_data(json_data, draw_date)
                if lottery_data:
                    return lottery_data

            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö JSON-LD ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            print("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö JSON-LD ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°")
            lottery_data = self._parse_lottery_data(soup, draw_date)
            return lottery_data

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return None

    def _extract_json_ld(self, soup):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON-LD ‡∏à‡∏≤‡∏Å HTML"""
        try:
            import json
            # ‡∏´‡∏≤ script tag ‡∏ó‡∏µ‡πà‡∏°‡∏µ type="application/ld+json"
            json_scripts = soup.find_all('script', type='application/ld+json')
            print(f"üîç ‡∏û‡∏ö script tag: {len(json_scripts)}")

            for i, script in enumerate(json_scripts):
                print(f"üîç Script {i+1}: {script.get('class', 'no-class')}")
                try:
                    json_data = json.loads(script.string)
                    if json_data.get('@type') == 'NewsArticle':
                        print(f"‚úÖ ‡∏û‡∏ö NewsArticle ‡πÉ‡∏ô script {i+1}")
                        return json_data
                except json.JSONDecodeError:
                    continue

            return None
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á JSON-LD ‡πÑ‡∏î‡πâ: {e}")
            return None

    def _parse_json_ld_data(self, json_data, draw_date):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å JSON-LD"""
        try:
            from datetime import datetime
            import re

            lottery_data = {
                'draw_date': draw_date,
                'draw_number': f"{datetime.strptime(draw_date, '%Y-%m-%d').day}/{datetime.strptime(draw_date, '%Y-%m-%d').year + 543}",
                'first_prize': '',
                'second_prize_1': '',
                'second_prize_2': '',
                'third_prize_1': '',
                'third_prize_2': '',
                'fourth_prize_1': '',
                'second_prizes': [],
                'third_prizes': [],
                'fourth_prizes': [],
                'fifth_prizes': [],
                'nearby_prizes': []
            }

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å articleBody
            article_body = json_data.get('articleBody', '')
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å articleBody...")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 - ‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            first_prize_match = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})', article_body)
            if first_prize_match:
                lottery_data['first_prize'] = first_prize_match.group(1)
                print(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {lottery_data['first_prize']}")
            else:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô - ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
                first_prize_alt = re.search(r'\b(\d{6})\b', article_body)
                if first_prize_alt:
                    lottery_data['first_prize'] = first_prize_alt.group(1)
                    print(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô): {lottery_data['first_prize']}")

            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ pattern ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            front3_match = re.search(r'‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})&nbsp;\s+(\d{3})&nbsp;', article_body)
            if front3_match:
                lottery_data['second_prize_1'] = front3_match.group(1)
                lottery_data['second_prize_2'] = front3_match.group(2)
                print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")
            else:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å pattern ‡∏≠‡∏∑‡πà‡∏ô
                front3_alt = re.search(r'(\d{3})&nbsp;\s+(\d{3})&nbsp;\s+.*?‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß', article_body)
                if front3_alt:
                    lottery_data['second_prize_1'] = front3_alt.group(1)
                    lottery_data['second_prize_2'] = front3_alt.group(2)
                    print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß (pattern 2): {lottery_data['second_prize_1']}, {lottery_data['second_prize_2']}")

            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å debug
            last3_match = re.search(r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß.*?(\d{3})&nbsp;\s+(\d{3})&nbsp;', article_body)
            if last3_match:
                lottery_data['third_prize_1'] = last3_match.group(1)
                lottery_data['third_prize_2'] = last3_match.group(2)
                print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß: {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")
            else:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
                all_3digit_numbers = re.findall(r'\b(\d{3})\b', article_body)
                print(f"‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö: {all_3digit_numbers}")

                # ‡∏ï‡∏±‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å
                used_numbers = []
                if lottery_data['second_prize_1']: used_numbers.append(lottery_data['second_prize_1'])
                if lottery_data['second_prize_2']: used_numbers.append(lottery_data['second_prize_2'])

                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                remaining_numbers = [num for num in all_3digit_numbers if num not in used_numbers and num != '000']

                if len(remaining_numbers) >= 2:
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß"
                    pos_last3_text = article_body.find('‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß')
                    if pos_last3_text != -1:
                        text_after_last3 = article_body[pos_last3_text:]
                        # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 000
                        last3_candidates = re.findall(r'\b(\d{3})\b', text_after_last3)
                        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 000 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                        valid_last3 = [num for num in last3_candidates if num != '000' and num not in used_numbers]
                        if len(valid_last3) >= 2:
                            lottery_data['third_prize_1'] = valid_last3[0]
                            lottery_data['third_prize_2'] = valid_last3[1]
                            print(f"‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á): {lottery_data['third_prize_1']}, {lottery_data['third_prize_2']}")

            # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß - ‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß...")
            # Pattern ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö \r\n26\r\n ‡πÑ‡∏î‡πâ
            last2_patterns = [
                r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?\\r\\n(\d{2})\\r\\n',  # ‡∏à‡∏±‡∏ö \r\n26\r\n
                r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?[\r\n]+(\d{2})[\r\n]+',  # ‡∏à‡∏±‡∏ö newline + ‡πÄ‡∏•‡∏Ç + newline
                r'‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?(\d{2})(?!\d)',  # pattern ‡πÄ‡∏î‡∏¥‡∏°
            ]

            found_last2 = False
            for i, pattern in enumerate(last2_patterns, 1):
                last2_match = re.search(pattern, article_body)
                if last2_match:
                    temp_last2 = last2_match.group(1)
                    print(f"üîç ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (pattern {i}): {temp_last2}")
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 00
                    if temp_last2 not in ['00']:  # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏•‡∏Ç 00 ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å 000
                        lottery_data['fourth_prize_1'] = temp_last2
                        print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: {lottery_data['fourth_prize_1']}")
                        found_last2 = True
                        break
                    else:
                        print(f"‚ùå ‡πÄ‡∏•‡∏Ç {temp_last2} ‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á")

            if not found_last2:
                print("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å pattern ‡∏´‡∏•‡∏±‡∏Å ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...")
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                pos_last2_text = article_body.find('‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß')
                if pos_last2_text != -1:
                    text_after_last2 = article_body[pos_last2_text:pos_last2_text+200]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
                    print(f"üîç ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß': {repr(text_after_last2[:100])}")
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ
                    last2_candidates = re.findall(r'\b(\d{2})(?!\d)', text_after_last2)
                    print(f"üîç ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: {last2_candidates}")
                    if last2_candidates:
                        # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç 00 ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
                        valid_last2 = [num for num in last2_candidates if num not in ['00']]
                        if valid_last2:
                            lottery_data['fourth_prize_1'] = valid_last2[0]
                            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á): {lottery_data['fourth_prize_1']}")
                        else:
                            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà valid")
                    else:
                        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß'")

            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ pattern ‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å server.py
            if not lottery_data.get('fourth_prize_1'):
                print("üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢ pattern ‡∏≠‡∏∑‡πà‡∏ô...")
                last2_html = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß.*?(\d{2})', article_body)
                if last2_html:
                    candidate = last2_html.group(1)
                    if candidate not in ['00']:
                        lottery_data['fourth_prize_1'] = candidate
                        print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß (HTML pattern): {lottery_data['fourth_prize_1']}")
                    else:
                        print(f"‚ùå ‡πÄ‡∏•‡∏Ç {candidate} ‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á)...")
            self._extract_additional_prizes(article_body, lottery_data)

            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
            print(f"üêõ Debug lottery_data ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
            for key, value in lottery_data.items():
                if value:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
                    print(f"   {key}: {value}")

            return lottery_data

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON-LD ‡πÑ‡∏î‡πâ: {e}")
            return None

    def _extract_additional_prizes(self, article_body, lottery_data):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"""
        try:
            # ‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (2 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
            nearby_patterns = [
                r'‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})&nbsp;\s*(\d{6})&nbsp;',
                r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1.*?(\d{6})&nbsp;\s*(\d{6})&nbsp;'
            ]
            for pattern in nearby_patterns:
                nearby_match = re.search(pattern, article_body)
                if nearby_match:
                    lottery_data['nearby_prizes'] = [nearby_match.group(1), nearby_match.group(2)]
                    print(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {lottery_data['nearby_prizes']}")
                    break

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 (5 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡πÉ‡∏ä‡πâ findall ‡πÅ‡∏ó‡∏ô
            second_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ 5 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}&nbsp;.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3)', article_body, re.DOTALL)
            if second_section:
                second_numbers = re.findall(r'(\d{6})&nbsp;', second_section.group(1))
                lottery_data['second_prizes'] = second_numbers[:5]
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2: {lottery_data['second_prizes']}")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 (10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
            third_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 ‡∏°‡∏µ 10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}&nbsp;.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4|$)', article_body, re.DOTALL)
            if third_section:
                third_numbers = re.findall(r'(\d{6})&nbsp;', third_section.group(1))
                lottery_data['third_prizes'] = third_numbers[:10]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3: {len(lottery_data['third_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 (50 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            fourth_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 ‡∏°‡∏µ 50 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}.*?)(?=‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5|$)', article_body, re.DOTALL)
            if fourth_section:
                # ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏° column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ &nbsp;
                fourth_numbers = re.findall(r'(\d{6})(?:&nbsp;|(?=\s)|(?=\n)|$)', fourth_section.group(1))
                lottery_data['fourth_prizes'] = fourth_numbers[:50]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 50 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4: {len(lottery_data['fourth_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 (100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            fifth_section = re.search(r'‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 ‡∏°‡∏µ 100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•.*?(\d{6}.*?)(?=$)', article_body, re.DOTALL)
            if fifth_section:
                # ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏° column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ &nbsp;
                fifth_numbers = re.findall(r'(\d{6})(?:&nbsp;|(?=\s)|(?=\n)|$)', fifth_section.group(1))
                lottery_data['fifth_prizes'] = fifth_numbers[:100]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 100 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5: {len(lottery_data['fifth_prizes'])} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ: {e}")

    def _parse_lottery_data(self, soup, draw_date):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏à‡∏≤‡∏Å HTML (fallback method)"""
        try:
            from datetime import datetime
            import re

            lottery_data = {
                'draw_date': draw_date,
                'draw_number': f"{datetime.strptime(draw_date, '%Y-%m-%d').day}/{datetime.strptime(draw_date, '%Y-%m-%d').year + 543}",
                'first_prize': '',
                'second_prize_1': '',
                'second_prize_2': '',
                'third_prize_1': '',
                'third_prize_2': '',
                'fourth_prize_1': ''
            }

            # ‡∏´‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
            first_prize_elements = soup.find_all(class_='lotto_number--first')
            for element in first_prize_elements:
                text = element.get_text().strip()
                if re.match(r'\d{6}', text):
                    lottery_data['first_prize'] = text
                    print(f"‡∏û‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: {text}")
                    break

            return lottery_data

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡πÑ‡∏î‡πâ: {e}")
            return {}

    def get_from_database(self, draw_date: str) -> Optional[Dict[str, Any]]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        return self.db.get_lottery_data_from_db(draw_date)

    def save_to_database(self, lottery_data: Dict[str, Any]) -> bool:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å server.py)"""
        if not self.db.supabase:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False

        try:
            # 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_draw = self.db.supabase.table('lottery_draws').select("*").eq("draw_date", lottery_data['draw_date']).execute()

            if existing_draw.data:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
                draw_id = existing_draw.data[0]['id']
                self.db.supabase.table('lottery_prizes').delete().eq("draw_id", draw_id).execute()
                print(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î {lottery_data['draw_date']}")
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                draw_result = self.db.supabase.table('lottery_draws').insert({
                    'draw_date': lottery_data['draw_date'],
                    'draw_number': lottery_data['draw_number'],
                    'status': 'active'
                }).execute()
                draw_id = draw_result.data[0]['id']
                print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà ID: {draw_id}")

            # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            prizes_to_insert = []

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏•‡∏±‡∏Å
            prize_configs = [
                ('first_prize', lottery_data.get('first_prize'), 6000000),
                ('front_3', lottery_data.get('second_prize_1'), 4000, 1),
                ('front_3', lottery_data.get('second_prize_2'), 4000, 2),
                ('back_3', lottery_data.get('third_prize_1'), 4000, 1),
                ('back_3', lottery_data.get('third_prize_2'), 4000, 2),
                ('back_2', lottery_data.get('fourth_prize_1'), 2000),
            ]

            for config in prize_configs:
                if len(config) == 3:  # ‡πÑ‡∏°‡πà‡∏°‡∏µ position
                    prize_type, number, amount = config
                    position = 1
                else:  # ‡∏°‡∏µ position
                    prize_type, number, amount, position = config

                if number:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç
                    prizes_to_insert.append({
                        'draw_id': draw_id,
                        'prize_type': prize_type,
                        'prize_number': number,
                        'position': position,
                        'amount': amount
                    })

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            for i, number in enumerate(lottery_data.get('nearby_prizes', []), 1):
                if number:
                    prizes_to_insert.append({
                        'draw_id': draw_id,
                        'prize_type': 'nearby',
                        'prize_number': number,
                        'position': i,
                        'amount': 100000
                    })

            # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5
            prize_types_extended = [
                ('second_prize', lottery_data.get('second_prizes', []), 200000),
                ('third_prize', lottery_data.get('third_prizes', []), 80000),
                ('fourth_prize', lottery_data.get('fourth_prizes', []), 40000),
                ('fifth_prize', lottery_data.get('fifth_prizes', []), 20000)
            ]

            for prize_type, numbers, amount in prize_types_extended:
                for i, number in enumerate(numbers, 1):
                    if number:
                        prizes_to_insert.append({
                            'draw_id': draw_id,
                            'prize_type': prize_type,
                            'prize_number': number,
                            'position': i,
                            'amount': amount
                        })

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if prizes_to_insert:
                result = self.db.supabase.table('lottery_prizes').insert(prizes_to_insert).execute()
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• {len(prizes_to_insert)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                return False

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return False

    def _prepare_prize_data(self, draw_id: int, lottery_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        prizes = []

        # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
        if lottery_data.get('first_prize'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'first_prize',
                'prize_number': lottery_data['first_prize'],
                'amount': 6000000,
                'position': 1
            })

        # ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
        if lottery_data.get('second_prize_1'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'front_3',
                'prize_number': lottery_data['second_prize_1'],
                'amount': 4000,
                'position': 1
            })

        if lottery_data.get('second_prize_2'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'front_3',
                'prize_number': lottery_data['second_prize_2'],
                'amount': 4000,
                'position': 2
            })

        # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
        if lottery_data.get('third_prize_1'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'back_3',
                'prize_number': lottery_data['third_prize_1'],
                'amount': 4000,
                'position': 1
            })

        if lottery_data.get('third_prize_2'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'back_3',
                'prize_number': lottery_data['third_prize_2'],
                'amount': 4000,
                'position': 2
            })

        # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
        if lottery_data.get('fourth_prize_1'):
            prizes.append({
                'draw_id': draw_id,
                'prize_type': 'back_2',
                'prize_number': lottery_data['fourth_prize_1'],
                'amount': 2000,
                'position': 1
            })

        # ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self._add_additional_prizes(draw_id, lottery_data, prizes)

        return prizes

    def _add_additional_prizes(self, draw_id: int, lottery_data: Dict[str, Any], prizes: List[Dict[str, Any]]):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2-5 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"""
        prize_configs = [
            ('second_prizes', 'second_prize', 200000),
            ('third_prizes', 'third_prize', 80000),
            ('fourth_prizes', 'fourth_prize', 40000),
            ('fifth_prizes', 'fifth_prize', 20000),
            ('nearby_prizes', 'nearby', 100000)
        ]

        for data_key, prize_type, amount in prize_configs:
            if lottery_data.get(data_key):
                for i, number in enumerate(lottery_data[data_key], 1):
                    prizes.append({
                        'draw_id': draw_id,
                        'prize_type': prize_type,
                        'prize_number': number,
                        'amount': amount,
                        'position': i
                    })

    def check_number_complete(self, number: str, draw_date: str) -> Dict[str, Any]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å server.py)"""
        if not self.db.supabase:
            return {"number": number, "draw_date": draw_date, "results": [], "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}

        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°)
            check_draw = self.db.supabase.table('lottery_draws').select("id, draw_number").eq("draw_date", draw_date).execute()

            if not check_draw.data:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ scrape ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏≥‡∏•‡∏±‡∏á scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
                lottery_data = self.get_lottery_by_date(draw_date)

                if lottery_data:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    self.save_to_database(lottery_data)
                    print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {draw_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    check_draw = self.db.supabase.table('lottery_draws').select("id, draw_number").eq("draw_date", draw_date).execute()
                else:
                    return {"number": number, "draw_date": draw_date, "results": [], "message": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î {draw_date} ‡πÑ‡∏î‡πâ"}

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≤‡∏á‡πÜ
            patterns_to_check = {
                "full_6_digits": number,           # ‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏°
                "front_3_digits": number[:3],      # ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
                "back_3_digits": number[-3:],      # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
                "back_2_digits": number[-2:]       # ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
            }

            all_matches = []

            # ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°)
            for match_type, check_number in patterns_to_check.items():
                result = (self.db.supabase.table('lottery_prizes')
                         .select('prize_type, amount, position, lottery_draws!inner(draw_date, draw_number)')
                         .eq('prize_number', check_number)
                         .eq('lottery_draws.draw_date', draw_date)
                         .execute())

                if result.data:
                    for item in result.data:
                        # ‡πÅ‡∏õ‡∏•‡∏á prize_type ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                        prize_names = {
                            'first_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                            'front_3': '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß',
                            'back_3': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß',
                            'back_2': '‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß',
                            'nearby': '‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1',
                            'second_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2',
                            'third_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3',
                            'fourth_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4',
                            'fifth_prize': '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5'
                        }

                        all_matches.append({
                            'match_type': match_type,
                            'matched_digits': check_number,
                            'prize_type': item['prize_type'],
                            'prize_name': prize_names.get(item['prize_type'], item['prize_type']),
                            'amount': item['amount'],
                            'position': item['position']
                        })

            # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° amount (‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            all_matches.sort(key=lambda x: x['amount'], reverse=True)

            return {
                "number": number,
                "draw_date": draw_date,
                "draw_number": check_draw.data[0]['draw_number'] if check_draw.data else None,
                "total_matches": len(all_matches),
                "results": all_matches,
                "message": "‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!" if all_matches else "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
            }

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÑ‡∏î‡πâ: {e}")
            return {"number": number, "draw_date": draw_date, "results": [], "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}