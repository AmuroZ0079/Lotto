#!/usr/bin/env python3
"""
Smart Lottery Cron Script

‡∏•‡∏≠‡∏à‡∏¥‡∏Å:
1. ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 19:00
2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 16 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
3. ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‚Üí ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° scrape ‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠
5. ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏´‡∏¢‡∏∏‡∏î ‡∏£‡∏≠‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 16 ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
- Linux/Mac: python3 cron_script.py
- Windows: python cron_script.py

Cron job setting (Linux):
0 19 * * * /usr/bin/python3 /path/to/cron_script.py >> /var/log/lottery_cron.log 2>&1
"""

import requests
import json
import sys
from datetime import datetime, timedelta
import logging

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏Ç‡∏≠‡∏á API
API_BASE_URL = "https://lotto-six-roan.vercel.app"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('lottery_cron.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

def should_scrape_today():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£ scrape ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    today = datetime.now()

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 16 ‡∏ï‡πâ‡∏≠‡∏á scrape ‡πÄ‡∏™‡∏°‡∏≠
    if today.day in [1, 16]:
        return True, "lottery_day"

    # ‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        response = requests.get(f"{API_BASE_URL}/cron/status", timeout=30)
        if response.status_code == 200:
            data = response.json()
            if not data.get("current_data_exists", True):
                return True, "missing_data"

        return False, "data_exists"

    except Exception as e:
        logging.error(f"Error checking status: {e}")
        return False, "error"

def scrape_current_lottery():
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ scrape ‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        logging.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...")

        response = requests.post(
            f"{API_BASE_URL}/cron/scrape-current",
            timeout=120  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ scraping ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
        )

        if response.status_code == 200:
            result = response.json()
            status = result.get("status", "unknown")
            date = result.get("date", "")
            total_prizes = result.get("total_prizes", 0)
            message = result.get("message", "")

            if status == "already_exists":
                logging.info(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {date} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ({total_prizes} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)")
                return True, message

            elif status == "success":
                logging.info(f"üéâ Scrape ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏á‡∏ß‡∏î {date} ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {total_prizes} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                return True, message

            elif status == "partial_success":
                logging.warning(f"‚ö†Ô∏è Scrape ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏á‡∏ß‡∏î {date} ‡πÑ‡∏î‡πâ {total_prizes} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                return False, message

            elif status == "failed":
                logging.error(f"‚ùå Scrape ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏á‡∏ß‡∏î {date}: {message}")
                return False, message

            else:
                logging.error(f"‚ùì ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö: {status}")
                return False, message

        else:
            error_msg = f"HTTP Error {response.status_code}: {response.text}"
            logging.error(f"‚ùå API Error: {error_msg}")
            return False, error_msg

    except Exception as e:
        error_msg = f"Exception: {str(e)}"
        logging.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_msg}")
        return False, error_msg

def send_notification(success, message, reason=""):
    """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° LINE Notify ‡∏´‡∏£‡∏∑‡∏≠ Email)"""
    status_emoji = "‚úÖ" if success else "‚ùå"
    log_message = f"{status_emoji} Lottery Cron: {message}"

    if reason:
        log_message += f" (Reason: {reason})"

    logging.info(log_message)

    # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE Notify ‡∏´‡∏£‡∏∑‡∏≠ Email ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    # send_line_notify(log_message)
    # send_email_notification(log_message)

def main():
    """Main cron function"""
    try:
        now = datetime.now()
        logging.info(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Lottery Cron Job - {now.strftime('%Y-%m-%d %H:%M:%S')}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ scrape ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        should_scrape, reason = should_scrape_today()

        if not should_scrape:
            logging.info(f"‚è≠Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á scrape ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - {reason}")
            send_notification(True, f"‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á scrape ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", reason)
            return

        logging.info(f"üéØ ‡∏ï‡πâ‡∏≠‡∏á scrape ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - {reason}")

        # ‡πÄ‡∏£‡∏¥‡πà‡∏° scrape
        success, message = scrape_current_lottery()

        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        send_notification(success, message, reason)

        if success:
            logging.info("üéâ Cron job ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            logging.error("üíî Cron job ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        error_msg = f"Cron job failed: {str(e)}"
        logging.error(f"üí• {error_msg}")
        send_notification(False, error_msg, "exception")

if __name__ == "__main__":
    main()